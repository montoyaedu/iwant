#!/bin/bash

###
###
### FUNCTION get_script_dir
### INTERNET COPY&PASTE
### SOURCE
### http://www.ostricher.com
### /2014/10/the-right-way-to-get-the-directory-of-a-bash-script/
###
###

get_script_dir () {
    SOURCE="${BASH_SOURCE[0]}"
    # While $SOURCE is a symlink,
    # resolve it
    while [ -h "$SOURCE" ]; do
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$( readlink "$SOURCE" )"
        # If $SOURCE was a relative symlink 
        # (so no "/" as prefix,
        # need to resolve it relative 
        # to the symlink base directory
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    done
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    echo "$DIR"
}

###
###
### END FUNCTION get_script_dir
###
###

echo script directory should be "$(get_script_dir)"

###
###
### SNIPPET verify_home_directory
###
###

if [ -z "${IWANT_HOME}" ]; then
    echo "IWANT_HOME environment variable is not set."
    echo "using $(get_script_dir)"
    IWANT_HOME=$(get_script_dir)/..
fi

if [ ! -d ${IWANT_HOME} ]; then
    echo "IWANT_HOME points to an invalid path ${IWANT_HOME}"
    echo "using $(get_script_dir)/.."
    IWANT_HOME=$(get_script_dir)/..
fi

if [ ! -d ${IWANT_HOME} ]; then
    echo "IWANT_HOME points to an invalid path ${IWANT_HOME}"
    exit 1
fi

IWANT_HOME=`cd ${IWANT_HOME}; pwd -P`

echo "IWANT_HOME = ${IWANT_HOME}"
echo "WORKING DIR = `pwd`"
echo "SCRIPT DIR = $(get_script_dir)"
export PATH=${PATH}:${IWANT_HOME}/bin

###
###
### END SNIPPET verify_home_directory
###
###

load_file() {
    if [ -f $1 ]; then
        echo "loading $1"
        . $1
    else
        echo "file not found $1"
    fi
}

###
###
### SNIPPET load_libraries
###
###

. ${IWANT_HOME}/bin/iwant-bash-api

load_file ${HOME}/.iwantprofile

if is_equal_str "A" "A"; then
    echo "A == A"
fi

if ! is_equal_str "A" "B"; then
    echo "A != B"
fi

###
###
### END SNIPPET load_libraries
###
###

abort_if_commant_does_not_exist ${DIALOG}

echo Script name: $0
echo $# arguments 

if (( $# == 0 )); then
    show_dialog_start
fi

is_new=true

if (( $# == 1 )); then
    if [[ "$1" == "--resume" ]]; then
        show_dialog_select_folder
        FOLDER=$(get_dialog_result)
        is_new=false
    fi
fi

if $is_new; then

show_dialog_template
TEMPLATE=$(get_dialog_result)

ASSEMBLYVERSION=1.0.0
ASSEMBLYVERSIONQUALIFIER=-SNAPSHOT

while true
do
    y=
    show_dialog_artifact_details \
        "$NAME" "$PACKAGE" "$ASSEMBLYVERSION" "$ASSEMBLYVERSIONQUALIFIER"
    VALUES=$(get_dialog_result)
    echo VALUES=$VALUES
    IFS=$' \n' read -rd '' -a y <<<"$VALUES"
    #echo array length=${#y[@]} 
    if (( ${#y[@]} != 4 )); then
        echo "invalid array length. should be 4."
        continue
    fi
    NAME=${y[0]}
    PACKAGE=${y[1]}
    ASSEMBLYVERSION=${y[2]}
    ASSEMBLYVERSIONQUALIFIER=${y[3]}
    verify_identifier $NAME
    if (( $? != 0 )); then
        continue;
    fi
    verify_namespace_identifier $PACKAGE
    if (( $? != 0 )); then
        continue
    fi
    break;
done

if [[ "${TEMPLATE}" == "c#" ]]; then
    show_dialog_dotnet_framework_version
    VERSION=$(get_dialog_result)

    show_dialog_output_type
    TYPE=$(get_dialog_result)

    ARTIFACTEXTENSION=$(resolve_artifact_extension $TYPE)

    PROJECTGUID=`uuidgen`
    COMGUID=`uuidgen`
    SOLUTIONGUID=`uuidgen`
fi

TEMPLATEDIR=${IWANT_HOME}/templates/${TEMPLATE}
PROJECTNAME=${PACKAGE}.${NAME}
FOLDER=${PROJECTNAME}

if [ ! -d "$TEMPLATEDIR" ]; then
  echo template ${TEMPLATEDIR} does not exist.
  exit 1
fi

if [[ "$TEMPLATE" == "java" ]]; then
    FOLDER=`echo "${FOLDER}" | tr '[:upper:]' '[:lower:]'`
    PACKAGE=`echo "${PACKAGE}" | tr '[:upper:]' '[:lower:]'`
fi

if [ -d "$FOLDER" ]; then
  echo destination ${FOLDER} already exists.
  exit 1
fi

show_dialog_remote
REMOTE=$(get_dialog_result)

echo "using remote ${REMOTE}"

PRIVATE="true"

if [[ "${REMOTE}" == "git@bitbucket.org" ]]; then
    show_dialog_public_private
    PRIVATE=$(get_dialog_result)
fi

    y=
    while (( ${#y[@]} != 2 ))
    do
        show_dialog_bitbucket_details "${USERNAME}" "${OWNER}"
        VALUES=$(get_dialog_result)
        echo VALUES=$VALUES
        IFS=$' \n' read -rd '' -a y <<<"$VALUES"
        if (( ${#y[@]} != 2 )); then
            echo "invalid array length. should be 2."
            continue
        fi
        USERNAME=${y[0]}
        OWNER=${y[1]}

        verify_identifier $USERNAME
        if (( $? != 0 )); then
            continue;
        fi
        verify_identifier $OWNER
        if (( $? != 0 )); then
            continue;
        fi
    done

    USEREMAIL=`git config user.email`

REMOTE_URL=${REMOTE}:${OWNER}/${PROJECTNAME}.git

if [[ "${REMOTE}" == "git@bitbucket.org" ]]; then
    curl \
        --user ${USERNAME} \
        https://api.bitbucket.org/1.0/repositories/ \
        --data name=${PROJECTNAME} \
        --data has_wiki=true \
        --data has_issues=true \
        --data is_private=${PRIVATE} \
        --data owner=${OWNER}
    if (( $? != 0 )); then
        show_dialog "Create Remote Manually" "${REMOTE_URL}"
    fi
else
    show_dialog "Create Remote Manually" "${REMOTE_URL}"
fi

cp -R ${TEMPLATEDIR} ${FOLDER}
cd ${FOLDER}

if [[ "${TEMPLATE}" == "c#" ]]; then
SEDXX='sed 
 -e s/\${AssemblyName}/'${NAME}'/g 
 -e s/\${RootNamespace}/'${PACKAGE}'/g
 -e s/\${TargetFrameworkVersion}/'${VERSION}'/g 
 -e s/\${OutputType}/'${TYPE}'/g
 -e s/\${ArtifactExtension}/'${ARTIFACTEXTENSION}'/g 
 -e s/\${ProjectName}/'${PROJECTNAME}'/g 
 -e s/\${Remote}/'${REMOTE}'/g 
 -e s/\${UserName}/'${USERNAME}'/g 
 -e s/\${Owner}/'${OWNER}'/g 
 -e s/\${UserEmail}/'${USEREMAIL}'/g 
 -e s/\${WebServer}/'${WEBSERVER}'/g 
 -e s/\${ProjectGuid}/'${PROJECTGUID}'/g 
 -e s/\${ComGuid}/'${COMGUID}'/g
 -e s/\${SolutionGuid}/'${SOLUTIONGUID}'/g
 -e s/\${AssemblyVersion}/'${ASSEMBLYVERSION}'/g 
 -e s/\${AssemblyVersionQualifier}/'${ASSEMBLYVERSIONQUALIFIER}'/g'

echo using substitution command ${SEDXX}

${SEDXX} App_vs2010.sln > ${PROJECTNAME}_vs2010.sln
${SEDXX} App.csproj > ${PROJECTNAME}.csproj
${SEDXX} App.nuspec > ${PROJECTNAME}.nuspec
${SEDXX} App.cs > ${NAME}.cs
${SEDXX} AppTests.cs > ${NAME}Tests.cs
${SEDXX} Properties/AssemblyInfo.cstemplate > Properties/AssemblyInfo.cs
${SEDXX} pom.xmltemplate > pom.xml
${SEDXX} config.xmltemplate > config.xml
${SEDXX} prepare.xmltemplate > prepare.xml
${SEDXX} release.xmltemplate > release.xml
${SEDXX} cover.battemplate > cover.bat
${SEDXX} version.txttemplate > version.txt
${SEDXX} buildsetup.isstemplate > buildsetup.iss
${SEDXX} release.template > release
${SEDXX} release.battemplate > release.bat
${SEDXX} buildonly.template > buildonly
${SEDXX} buildonly.battemplate > buildonly.bat
${SEDXX} buildandpublish.battemplate > buildandpublish.bat

chmod +x release
chmod +x prepare
chmod +x buildonly

cp app_${VERSION}.configtemplate app.config

rm App_vs2010.sln
rm App.csproj
rm App.nuspec
rm App.cs
rm AppTests.cs
rm Properties/AssemblyInfo.cstemplate
rm pom.xmltemplate
rm config.xmltemplate
rm prepare.xmltemplate
rm release.xmltemplate
rm cover.battemplate
rm *.configtemplate
rm version.txttemplate
rm buildsetup.isstemplate
rm release.template
rm release.battemplate
rm buildonly.template
rm buildonly.battemplate
rm buildandpublish.battemplate
else
    ARTIFACTID=`echo "${NAME}" | tr '[:upper:]' '[:lower:]'`
    PROJECTNAME=`echo "${PROJECTNAME}" | tr '[:upper:]' '[:lower:]'`
SEDXX='sed 
 -e s/\${AssemblyName}/'${NAME}'/g 
 -e s/\${ArtifactId}/'${ARTIFACTID}'/g
 -e s/\${RootNamespace}/'${PACKAGE}'/g
 -e s/\${ArtifactExtension}/'${ARTIFACTEXTENSION}'/g 
 -e s/\${ProjectName}/'${PROJECTNAME}'/g 
 -e s/\${Remote}/'${REMOTE}'/g 
 -e s/\${UserName}/'${USERNAME}'/g 
 -e s/\${Owner}/'${OWNER}'/g 
 -e s/\${UserEmail}/'${USEREMAIL}'/g 
 -e s/\${WebServer}/'${WEBSERVER}'/g 
 -e s/\${AssemblyVersion}/'${ASSEMBLYVERSION}'/g 
 -e s/\${AssemblyVersionQualifier}/'${ASSEMBLYVERSIONQUALIFIER}'/g'

echo using substitution command ${SEDXX}

    AUXPATH0=`echo "${PACKAGE}" | tr . /`
    AUXPATH=`echo "${AUXPATH0}" | tr '[:upper:]' '[:lower:]'`
    ${SEDXX} App.java > ${NAME}.java
    ${SEDXX} AppTest.java > ${NAME}Test.java
    ${SEDXX} pom.xmltemplate > pom.xml
    ${SEDXX} config.xmltemplate > config.xml
    ${SEDXX} release.xmltemplate > release.xml
    ${SEDXX} cover.shtemplate > cover.sh
    mkdir -p src/main/java/$AUXPATH
    mkdir -p src/test/java/$AUXPATH
    mv ${NAME}.java src/main/java/$AUXPATH
    mv ${NAME}Test.java src/test/java/$AUXPATH
    rm App.java
    rm AppTest.java
    rm pom.xmltemplate
    rm config.xmltemplate
    rm release.xmltemplate
    rm cover.shtemplate
    chmod +x cover.sh
fi

git init
git add --all
git commit -m "Initial commit"

    git remote add origin ${REMOTE_URL}
    verify_cancel $?
else
    cd ${FOLDER}
fi
# end if is_new

    git push -u origin --all
    if (( $? != 0 )); then
        echo oops
        exit 1
    fi
    curl \
        -X POST \
        "${JENKINS_URL}/createItem?name=${PROJECTNAME}" \
        --data-binary "@config.xml" \
        -H "Content-Type: text/xml"
    verify_cancel $?
    curl \
        -X POST \
        "${JENKINS_URL}/job/${PROJECTNAME}/template/config.xml" \
        --data-binary "@detail.xml" \
        -H "Content-Type: text/xml"
    verify_cancel $?
    if [[ "${TEMPLATE}" == "c#" ]]; then
        curl \
            -X POST \
            "${JENKINS_URL}/createItem?name=${PROJECTNAME}-make-new-release" \
            --data-binary "@prepare.xml" \
            -H "Content-Type: text/xml"
        verify_cancel $?
        curl \
            -X POST \
            "${JENKINS_URL}/createItem?name=${PROJECTNAME}-publish-release" \
            --data-binary "@release.xml" \
            -H "Content-Type: text/xml"
        verify_cancel $?
    else
        curl \
            -X POST \
            "${JENKINS_URL}/createItem?name=${PROJECTNAME}-for-release" \
            --data-binary "@release.xml" \
            -H "Content-Type: text/xml"
        verify_cancel $?
    fi
