#!/bin/bash

. iwant-resolve
if [ -z "${IWANT_HOME}" ]; then
    echo "IWANT_HOME environment variable is not set."
    echo "Please execute:"
    echo "    source IWANT_HOME/bin/iwant-resolve"
    exit 1
fi

. ${IWANT_HOME}/bin/iwant-bash-api

if [ -f ${HOME}/.iwantprofile ]; then
    echo "profile found."
else
    echo "profile not found."
    show_dialog_text "Enter your Jenkins URL" "JENKINS_URL" "http://localhost:8080"
    JENKINS_URL=$(get_dialog_result)
    show_dialog_text "Enter your Web Server IP Address" "WEBSERVER" "localhost"
    WEBSERVER=$(get_dialog_result)
    echo "export JENKINS_URL=${JENKINS_URL}" >> ${HOME}/.iwantprofile
    echo "export WEBSERVER=${WEBSERVER}" >> ${HOME}/.iwantprofile
    echo "export USERNAME=`whoami`" >> ${HOME}/.iwantprofile
    echo "export OWNER=`whoami`" >> ${HOME}/.iwantprofile
fi

###
###
### SNIPPET load_libraries
###
###

load_file ${HOME}/.iwantprofile

if is_equal_str "A" "A"; then
    echo "A == A"
fi

if ! is_equal_str "A" "B"; then
    echo "A != B"
fi

###
###
### END SNIPPET load_libraries
###
###

abort_if_commant_does_not_exist ${DIALOG}

echo Script name: $0
echo $# arguments

if (( $# == 0 )); then
    show_dialog_start
fi

is_new=true

if (( $# == 1 )); then
    if [[ "$1" == "--resume" ]]; then
        show_dialog_select_folder
        FOLDER=$(get_dialog_result)
        is_new=false
    fi
fi

if $is_new; then

    show_dialog_template
    TEMPLATE=$(get_dialog_result)

    ASSEMBLYVERSION=1.0.0
    ASSEMBLYVERSIONQUALIFIER=-SNAPSHOT

    while true
    do
        y=
        show_dialog_artifact_details \
            "$NAME" "$PACKAGE" "$ASSEMBLYVERSION" "$ASSEMBLYVERSIONQUALIFIER"
        VALUES=$(get_dialog_result)
        echo VALUES=$VALUES
        IFS=$' \n' read -rd '' -a y <<<"$VALUES"
        #echo array length=${#y[@]} 
        if (( ${#y[@]} != 4 )); then
            echo "invalid array length. should be 4."
            continue
        fi
        NAME=${y[0]}
        PACKAGE=${y[1]}
        ASSEMBLYVERSION=${y[2]}
        ASSEMBLYVERSIONQUALIFIER=${y[3]}
        break;
    done

    TEMPLATEDIR=${IWANT_HOME}/.templates/${TEMPLATE}
    PROJECTNAME=${PACKAGE}.${NAME}
    FOLDER=${PROJECTNAME}

    if [ ! -d "$TEMPLATEDIR" ]; then
        echo template ${TEMPLATEDIR} does not exist.
        exit 1
    fi

    if [ -d "$FOLDER" ]; then
        echo destination ${FOLDER} already exists.
        exit 1
    fi

    git clone ${TEMPLATEDIR} ${FOLDER}
    cd ${FOLDER}
    rm -fr .git

    #TODO: rewrite all transformations
    export ProjectName=${PROJECTNAME}
    export RootNamespace=${PACKAGE}
    export AssemblyName=${NAME}
    export AssemblyVersion=${ASSEMBLYVERSION}
    export AssemblyVersionQualifier=${ASSEMBLYVERSIONQUALIFIER}
    export ArtifactId=${NAME}
    node $IWANT_HOME/applytemplate.js
    verify_cancel $?

    iwant-visit iwant-velocity

    sh finish
    verify_cancel $?

    rm -fr finish
    verify_cancel $?

    mvn clean
    verify_cancel $?

    mvn package
    verify_cancel $?

    show_dialog_start

    show_dialog_remote
    REMOTE=$(get_dialog_result)

    echo "using remote ${REMOTE}"

    PRIVATE="true"

    show_dialog_public_private
    PRIVATE=$(get_dialog_result)

    y=
    while (( ${#y[@]} != 2 ))
    do
        show_dialog_bitbucket_details "${USERNAME}" "${OWNER}"
        VALUES=$(get_dialog_result)
        echo VALUES=$VALUES
        IFS=$' \n' read -rd '' -a y <<<"$VALUES"
        if (( ${#y[@]} != 2 )); then
            echo "invalid array length. should be 2."
            continue
        fi
        USERNAME=${y[0]}
        OWNER=${y[1]}
    done

    USEREMAIL=`git config user.email`

    REMOTE_URL=${REMOTE}:${OWNER}/${PROJECTNAME}.git

    if [[ "${REMOTE}" == "git@bitbucket.org" ]]; then
        curl \
            --user ${USERNAME} \
            https://api.bitbucket.org/1.0/repositories/ \
            --data name=${PROJECTNAME} \
            --data has_wiki=true \
            --data has_issues=true \
            --data is_private=${PRIVATE} \
            --data owner=${OWNER}
        if (( $? != 0 )); then
            show_dialog "Create Remote Manually" "${REMOTE_URL}"
        fi
    fi

    if [[ "${REMOTE}" == "git@github.com" ]]; then
        if [[ "${PRIVATE}" == "true" ]]; then
            PRIV_FLAG=-p
        fi
        #FIXME: what to do if oauth token is not valid and needs to be generated?
        rm -f $HOME/.config/hub
        hub create $PRIV_FLAG ${OWNER}/${PROJECTNAME}
        if (( $? != 0 )); then
            show_dialog "Create Remote Manually" "${REMOTE_URL}"
        fi
        while true
        do
        if [ -f $HOME/.config/${OWNER}.github.oauth ]; then
            echo "oauth file found."
        else
            echo "oauth not found."
            read -s  -p "${OWNER} Password:" PASSWD
            while true
            do
                ghcreatetoken --username ${OWNER} --password $PASSWD --scopes repo --note iwant > $HOME/.config/${OWNER}.github.oauth.iwant
                if (( $? != 0 )); then
                    show_dialog "Remove your iwant token from github and retry again." "${REMOTE_URL}"
                else
                    break;
                fi
            done
            jsawk -i $HOME/.config/${OWNER}.github.oauth.iwant "return this.token" > $HOME/.config/${OWNER}.github.oauth
        fi
        OUT=`mktemp`
        curl -u "${OWNER}:`cat $HOME/.config/${OWNER}.github.oauth`" -X PUT -d '' 'https://api.github.com/repos/'"${OWNER}/${PROJECTNAME}"'/collaborators/'"$USERNAME" > $OUT 
        RC=`jsawk -i $OUT 'return this.message'`
        rm -f $OUT
        if [[ ! "${RC}" == "" ]]; then
            rm -f $HOME/.config/${OWNER}.github.oauth
            show_dialog "Remove your iwant token from github and retry again." "${REMOTE_URL}"
        else
            echo $RC
            break;
        fi
        done
    fi

    show_dialog "Please verify that the following remote has been created" "${REMOTE_URL}"


    git init
    git add --all
    git commit -m "Initial commit"

    git remote add origin ${REMOTE_URL}
    verify_cancel $?
else
    cd ${FOLDER}
    PROJECTNAME=$(basename ${FOLDER})
fi
# end if is_new

git push -u origin --all
